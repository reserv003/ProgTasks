std::vector` в C++ представляет собой динамический массив, который хранит элементы
в последовательной памяти и предоставляет удобный интерфейс для доступа к этим элементам
//1
Изменение длины std::vector происходит за счет выделения и освобождения памяти 
функциями `push_back`, `resize`, `reserve`, `shrink_to_fit`,когда это происходит, вектор автоматически
выделяет дополнительную память под новые элементы.
//2
Capacity и size**: `capacity` — это количество элементов, которое в данный момент может содержаться в векторе без
перевыделения памяти, а `size` — это количество фактических элементов в векторе
Функции `shrink_to_fit`, `resize`, `reserve`:
- `shrink_to_fit` пытается сжать capacity вектора до его size.
- `reserve` выделяет пространство для заданного количества элементов.
- `resize` устанавливает размер вектора на новое значение.
//3
Угловые скобки задают тип элементов, хранящихся в векторе. Например, std::vector<int> хранит целые числа
//4
#include <iostream>
#include <vector>
int main()
{
    std::vector<int> v = { 1, 2, 3 };
    for (int i = 0; i < v.size(); i++)
        std::cout << v[i];
    std::cout << ' ' << std::endl;

    // push_back добавляет элемент в конец вектора
    v.push_back(4);
    for (int i = 0; i < v.size(); i++)
        std::cout << v[i];
    std::cout << ' ' << std::endl;
    // v содержит: 1 2 3 4

    // insert вставляет элемент по итератору
    v.insert(v.begin() + 2, 5);
    for (int i = 0; i < v.size(); i++)
        std::cout << v[i];
    std::cout << ' ' << std::endl;
    // v содержит: 1 2 5 3 4

    // erase удаляет элемент по итератору
    v.erase(v.end() - 1);
    for (int i = 0; i < v.size(); i++)
        std::cout << v[i];
    std::cout << ' ' << std::endl;
    // v содержит: 1 2 5 3

    // clear полностью очищает вектор
    v.clear();
    // v пустой
    for (int i = 0; i < v.size(); i++)
        std::cout << v[i];

    return 0;
}
//5
at - эта функция проверяет, что индекс находится в допустимых границах вектора.
Если индекс за границами - выдается ошибка.Это полезно для обнаружения проблем в программе.
[] - эта функция не проверяет границы индекса.Если указан неверный индекс, может произойти 
что угодно.
at для безопасности
[] для скорости
